{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marka\\\\OneDrive\\\\Desktop\\\\Facultate\\\\Master\\\\TIA\\\\ProiectSemestruTIA\\\\FE\\\\tiaproiect\\\\src\\\\pages\\\\LakeDetails.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\"; // Import the DatePicker component\nimport \"react-datepicker/dist/react-datepicker.css\"; // Import the DatePicker styles\nimport \"../styles/LakeDetails.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LakeDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the lake ID from the URL using `useParams`\n  const [lake, setLake] = useState(null);\n  const [swims, setSwims] = useState([]);\n  const [error, setError] = useState(null);\n  const [selectedDates, setSelectedDates] = useState({}); // Store selected dates for each swim\n\n  useEffect(() => {\n    const fetchLakeDetails = async () => {\n      try {\n        const lakeResponse = await fetch(`http://localhost:8000/api/lakes/${id}`);\n        const lakeData = await lakeResponse.json();\n        setLake(lakeData);\n        const swimsResponse = await fetch(`http://localhost:8000/api/lakes/${id}/swims`);\n        const swimsData = await swimsResponse.json();\n        setSwims(swimsData);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchLakeDetails();\n  }, [id]);\n  const handleDateChange = (date, swimId) => {\n    setSelectedDates(prevDates => ({\n      ...prevDates,\n      [swimId]: date\n    }));\n  };\n  const handleReservation = swimId => {\n    const selectedDate = selectedDates[swimId];\n    if (!selectedDate) {\n      alert(\"Please select a date for reservation.\");\n      return;\n    }\n    alert(`Reservation made for Swim ${swimId} on ${selectedDate.toLocaleDateString()}`);\n    // Implement reservation logic here (e.g., save the reservation to the database)\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lake-details-container\",\n    children: lake ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lake-details-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Lake: \", lake.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Location: \", lake.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Size: \", lake.size, \" Ha\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swim-list\",\n        children: swims && swims.length > 0 ? swims.map(swim => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"swim-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Swim \", swim.swimNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-container\",\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: selectedDates[swim.id] // Set the selected date for the swim\n              ,\n              onChange: date => handleDateChange(date, swim.id) // Update the selected date\n              ,\n              minDate: new Date() // Prevent selecting past dates\n              ,\n              placeholderText: \"Select a date\",\n              dateFormat: \"yyyy/MM/dd\" // Set the format for the date\n              ,\n              className: \"calendar-date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reserve-button\",\n            onClick: () => handleReservation(swim.id),\n            children: \"Reserve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this)]\n        }, swim.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No swims available for this lake.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading lake details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(LakeDetails, \"KW/s9aZPJs072rhqW5rifbP0Mgo=\", false, function () {\n  return [useParams];\n});\n_c = LakeDetails;\nexport default LakeDetails;\nvar _c;\n$RefreshReg$(_c, \"LakeDetails\");","map":{"version":3,"names":["React","useEffect","useState","useParams","DatePicker","jsxDEV","_jsxDEV","Fragment","_Fragment","LakeDetails","_s","id","lake","setLake","swims","setSwims","error","setError","selectedDates","setSelectedDates","fetchLakeDetails","lakeResponse","fetch","lakeData","json","swimsResponse","swimsData","message","handleDateChange","date","swimId","prevDates","handleReservation","selectedDate","alert","toLocaleDateString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","location","size","length","map","swim","swimNumber","selected","onChange","minDate","Date","placeholderText","dateFormat","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marka/OneDrive/Desktop/Facultate/Master/TIA/ProiectSemestruTIA/FE/tiaproiect/src/pages/LakeDetails.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\"; // Import the DatePicker component\r\nimport \"react-datepicker/dist/react-datepicker.css\"; // Import the DatePicker styles\r\nimport \"../styles/LakeDetails.css\";\r\n\r\nconst LakeDetails = () => {\r\n  const { id } = useParams(); // Get the lake ID from the URL using `useParams`\r\n  const [lake, setLake] = useState(null);\r\n  const [swims, setSwims] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [selectedDates, setSelectedDates] = useState({}); // Store selected dates for each swim\r\n\r\n  useEffect(() => {\r\n    const fetchLakeDetails = async () => {\r\n      try {\r\n        const lakeResponse = await fetch(\r\n          `http://localhost:8000/api/lakes/${id}`\r\n        );\r\n        const lakeData = await lakeResponse.json();\r\n        setLake(lakeData);\r\n\r\n        const swimsResponse = await fetch(\r\n          `http://localhost:8000/api/lakes/${id}/swims`\r\n        );\r\n        const swimsData = await swimsResponse.json();\r\n        setSwims(swimsData);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    fetchLakeDetails();\r\n  }, [id]);\r\n\r\n  const handleDateChange = (date, swimId) => {\r\n    setSelectedDates((prevDates) => ({\r\n      ...prevDates,\r\n      [swimId]: date,\r\n    }));\r\n  };\r\n\r\n  const handleReservation = (swimId) => {\r\n    const selectedDate = selectedDates[swimId];\r\n    if (!selectedDate) {\r\n      alert(\"Please select a date for reservation.\");\r\n      return;\r\n    }\r\n    alert(\r\n      `Reservation made for Swim ${swimId} on ${selectedDate.toLocaleDateString()}`\r\n    );\r\n    // Implement reservation logic here (e.g., save the reservation to the database)\r\n  };\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"lake-details-container\">\r\n      {lake ? (\r\n        <>\r\n          <div className=\"lake-details-header\">\r\n            <h1>Lake: {lake.name}</h1>\r\n            <h1>Location: {lake.location}</h1>\r\n            <h1>Size: {lake.size} Ha</h1>\r\n          </div>\r\n\r\n          <div className=\"swim-list\">\r\n            {swims && swims.length > 0 ? (\r\n              swims.map((swim) => (\r\n                <div className=\"swim-item\" key={swim.id}>\r\n                  <h3>Swim {swim.swimNumber}</h3>\r\n\r\n                  <div className=\"calendar-container\">\r\n                    <DatePicker\r\n                      selected={selectedDates[swim.id]} // Set the selected date for the swim\r\n                      onChange={(date) => handleDateChange(date, swim.id)} // Update the selected date\r\n                      minDate={new Date()} // Prevent selecting past dates\r\n                      placeholderText=\"Select a date\"\r\n                      dateFormat=\"yyyy/MM/dd\" // Set the format for the date\r\n                      className=\"calendar-date\"\r\n                    />\r\n                  </div>\r\n\r\n                  <button\r\n                    className=\"reserve-button\"\r\n                    onClick={() => handleReservation(swim.id)}\r\n                  >\r\n                    Reserve\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>No swims available for this lake.</p>\r\n            )}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <p>Loading lake details...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LakeDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}