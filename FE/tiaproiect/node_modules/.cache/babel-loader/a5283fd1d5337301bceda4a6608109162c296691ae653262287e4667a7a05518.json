{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marka\\\\OneDrive\\\\Desktop\\\\Facultate\\\\Master\\\\TIA\\\\ProiectTIA\\\\FE\\\\tiaproiect\\\\src\\\\pages\\\\LakeDetails.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"../styles/LakeDetails.css\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LakeDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [lake, setLake] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [swims, setSwims] = useState([]);\n  const [reservations, setReservations] = useState({});\n  const [error, setError] = useState(null);\n  const [selectedDateRanges, setSelectedDateRanges] = useState({});\n  useEffect(() => {\n    const fetchLakeDetails = async () => {\n      try {\n        const token = localStorage.getItem(\"jwtToken\");\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        const lakeResponse = await fetch(`http://localhost:8000/api/lakes/${id}`, {\n          headers\n        });\n        const lakeData = await lakeResponse.json();\n        setLake(lakeData);\n        const swimsResponse = await fetch(`http://localhost:8000/api/lakes/${id}/swims`, {\n          headers\n        });\n        const swimsData = await swimsResponse.json();\n        setSwims(swimsData);\n        const reservationsData = {};\n        for (const swim of swimsData) {\n          const response = await fetch(`http://localhost:8000/reservations/${swim.id}/reservations`, {\n            headers\n          });\n          const data = await response.json();\n          reservationsData[swim.id] = data;\n        }\n        setReservations(reservationsData);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchLakeDetails();\n  }, [id]);\n  const handleDateRangeChange = (dates, swimId) => {\n    const [startDate, endDate] = dates;\n    setSelectedDateRanges(prevRanges => ({\n      ...prevRanges,\n      [swimId]: {\n        startDate,\n        endDate\n      }\n    }));\n  };\n  const handleReservation = async swimId => {\n    const selectedRange = selectedDateRanges[swimId];\n    if (!(selectedRange !== null && selectedRange !== void 0 && selectedRange.startDate) || !(selectedRange !== null && selectedRange !== void 0 && selectedRange.endDate)) {\n      alert(\"Please select a date range for reservation.\");\n      return;\n    }\n    if (!userId) {\n      alert(\"User not logged in.\");\n      return;\n    }\n    const startDate = new Date(selectedRange.startDate);\n    const endDate = new Date(selectedRange.endDate);\n    const startDateUTC = new Date(Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()));\n    const endDateUTC = new Date(Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate()));\n    const reservationData = {\n      swimId: swimId,\n      userId: userId,\n      startDate: startDateUTC.toISOString().split(\"T\")[0],\n      endDate: endDateUTC.toISOString().split(\"T\")[0]\n    };\n    try {\n      const token = localStorage.getItem(\"jwtToken\");\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      };\n      const response = await fetch(`http://localhost:8000/reservations/make`, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify(reservationData)\n      });\n      if (!response.ok) throw new Error(\"Failed to reserve swim\");\n      alert(\"Reservation successful!\");\n      const updatedReservationsResponse = await fetch(`http://localhost:8000/reservations/${swimId}/reservations`, {\n        headers\n      });\n      const updatedReservations = await updatedReservationsResponse.json();\n      setReservations(prevReservations => ({\n        ...prevReservations,\n        [swimId]: updatedReservations\n      }));\n      setSelectedDateRanges(prevRanges => {\n        const updatedRanges = {\n          ...prevRanges\n        };\n        delete updatedRanges[swimId];\n        return updatedRanges;\n      });\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const getUserIdFromToken = () => {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (!token) return null;\n    const decodedToken = jwtDecode(token);\n    setUserId(decodedToken.userId);\n  };\n  useEffect(() => {\n    getUserIdFromToken();\n  }, []);\n  const getExcludedDates = swimId => {\n    const swimReservations = reservations[swimId] || [];\n    const excludedDates = [];\n    swimReservations.forEach(reservation => {\n      const start = new Date(reservation.startDate);\n      const end = new Date(reservation.endDate);\n      const utcStart = new Date(Date.UTC(start.getFullYear(), start.getMonth(), start.getDate()));\n      const utcEnd = new Date(Date.UTC(end.getFullYear(), end.getMonth(), end.getDate()));\n      for (let d = new Date(utcStart); d <= utcEnd; d.setDate(d.getDate() + 1)) {\n        excludedDates.push(new Date(d));\n      }\n    });\n    return excludedDates;\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lake-details-container\",\n    children: lake ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lake-details-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Lake: \", lake.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Location: \", lake.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Size: \", lake.size, \" Ha\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swim-list\",\n        children: swims && swims.length > 0 ? swims.map(swim => {\n          var _selectedDateRanges$s, _selectedDateRanges$s2, _selectedDateRanges$s3;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"swim-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Swim \", swim.swimNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendar-container\",\n              children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                selected: (_selectedDateRanges$s = selectedDateRanges[swim.id]) === null || _selectedDateRanges$s === void 0 ? void 0 : _selectedDateRanges$s.startDate,\n                onChange: dates => handleDateRangeChange(dates, swim.id),\n                startDate: (_selectedDateRanges$s2 = selectedDateRanges[swim.id]) === null || _selectedDateRanges$s2 === void 0 ? void 0 : _selectedDateRanges$s2.startDate,\n                endDate: (_selectedDateRanges$s3 = selectedDateRanges[swim.id]) === null || _selectedDateRanges$s3 === void 0 ? void 0 : _selectedDateRanges$s3.endDate,\n                selectsRange: true,\n                minDate: new Date(),\n                placeholderText: \"Select date range\",\n                dateFormat: \"yyyy/MM/dd\",\n                className: \"calendar-date\",\n                excludeDates: getExcludedDates(swim.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"reserve-button\",\n              onClick: () => handleReservation(swim.id),\n              children: \"Reserve\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this)]\n          }, swim.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No swims available for this lake.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading lake details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(LakeDetails, \"4OwgazoR4BGaJI/ym19ufmkH0hY=\", false, function () {\n  return [useParams];\n});\n_c = LakeDetails;\nexport default LakeDetails;\nvar _c;\n$RefreshReg$(_c, \"LakeDetails\");","map":{"version":3,"names":["React","useEffect","useState","useParams","DatePicker","jwtDecode","jsxDEV","_jsxDEV","Fragment","_Fragment","LakeDetails","_s","id","lake","setLake","userId","setUserId","swims","setSwims","reservations","setReservations","error","setError","selectedDateRanges","setSelectedDateRanges","fetchLakeDetails","token","localStorage","getItem","headers","Authorization","lakeResponse","fetch","lakeData","json","swimsResponse","swimsData","reservationsData","swim","response","data","message","handleDateRangeChange","dates","swimId","startDate","endDate","prevRanges","handleReservation","selectedRange","alert","Date","startDateUTC","UTC","getFullYear","getMonth","getDate","endDateUTC","reservationData","toISOString","split","method","body","JSON","stringify","ok","Error","updatedReservationsResponse","updatedReservations","prevReservations","updatedRanges","getUserIdFromToken","decodedToken","getExcludedDates","swimReservations","excludedDates","forEach","reservation","start","end","utcStart","utcEnd","d","setDate","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","location","size","length","map","_selectedDateRanges$s","_selectedDateRanges$s2","_selectedDateRanges$s3","swimNumber","selected","onChange","selectsRange","minDate","placeholderText","dateFormat","excludeDates","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marka/OneDrive/Desktop/Facultate/Master/TIA/ProiectTIA/FE/tiaproiect/src/pages/LakeDetails.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"../styles/LakeDetails.css\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nconst LakeDetails = () => {\r\n  const { id } = useParams();\r\n  const [lake, setLake] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const [swims, setSwims] = useState([]);\r\n  const [reservations, setReservations] = useState({});\r\n  const [error, setError] = useState(null);\r\n  const [selectedDateRanges, setSelectedDateRanges] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchLakeDetails = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\r\n\r\n        const lakeResponse = await fetch(\r\n          `http://localhost:8000/api/lakes/${id}`,\r\n          { headers }\r\n        );\r\n        const lakeData = await lakeResponse.json();\r\n        setLake(lakeData);\r\n\r\n        const swimsResponse = await fetch(\r\n          `http://localhost:8000/api/lakes/${id}/swims`,\r\n          { headers }\r\n        );\r\n        const swimsData = await swimsResponse.json();\r\n        setSwims(swimsData);\r\n\r\n        const reservationsData = {};\r\n        for (const swim of swimsData) {\r\n          const response = await fetch(\r\n            `http://localhost:8000/reservations/${swim.id}/reservations`,\r\n            { headers }\r\n          );\r\n          const data = await response.json();\r\n          reservationsData[swim.id] = data;\r\n        }\r\n        setReservations(reservationsData);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    fetchLakeDetails();\r\n  }, [id]);\r\n\r\n  const handleDateRangeChange = (dates, swimId) => {\r\n    const [startDate, endDate] = dates;\r\n    setSelectedDateRanges((prevRanges) => ({\r\n      ...prevRanges,\r\n      [swimId]: { startDate, endDate },\r\n    }));\r\n  };\r\n\r\n  const handleReservation = async (swimId) => {\r\n    const selectedRange = selectedDateRanges[swimId];\r\n    if (!selectedRange?.startDate || !selectedRange?.endDate) {\r\n      alert(\"Please select a date range for reservation.\");\r\n      return;\r\n    }\r\n\r\n    if (!userId) {\r\n      alert(\"User not logged in.\");\r\n      return;\r\n    }\r\n\r\n    const startDate = new Date(selectedRange.startDate);\r\n    const endDate = new Date(selectedRange.endDate);\r\n\r\n    const startDateUTC = new Date(\r\n      Date.UTC(\r\n        startDate.getFullYear(),\r\n        startDate.getMonth(),\r\n        startDate.getDate()\r\n      )\r\n    );\r\n    const endDateUTC = new Date(\r\n      Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate())\r\n    );\r\n\r\n    const reservationData = {\r\n      swimId: swimId,\r\n      userId: userId,\r\n      startDate: startDateUTC.toISOString().split(\"T\")[0],\r\n      endDate: endDateUTC.toISOString().split(\"T\")[0],\r\n    };\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"jwtToken\");\r\n      const headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      };\r\n\r\n      const response = await fetch(`http://localhost:8000/reservations/make`, {\r\n        method: \"POST\",\r\n        headers,\r\n        body: JSON.stringify(reservationData),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to reserve swim\");\r\n\r\n      alert(\"Reservation successful!\");\r\n\r\n      const updatedReservationsResponse = await fetch(\r\n        `http://localhost:8000/reservations/${swimId}/reservations`,\r\n        { headers }\r\n      );\r\n      const updatedReservations = await updatedReservationsResponse.json();\r\n      setReservations((prevReservations) => ({\r\n        ...prevReservations,\r\n        [swimId]: updatedReservations,\r\n      }));\r\n      setSelectedDateRanges((prevRanges) => {\r\n        const updatedRanges = { ...prevRanges };\r\n        delete updatedRanges[swimId];\r\n        return updatedRanges;\r\n      });\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  const getUserIdFromToken = () => {\r\n    const token = localStorage.getItem(\"jwtToken\");\r\n    if (!token) return null;\r\n\r\n    const decodedToken = jwtDecode(token);\r\n    setUserId(decodedToken.userId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserIdFromToken();\r\n  }, []);\r\n\r\n  const getExcludedDates = (swimId) => {\r\n    const swimReservations = reservations[swimId] || [];\r\n    const excludedDates = [];\r\n    swimReservations.forEach((reservation) => {\r\n      const start = new Date(reservation.startDate);\r\n      const end = new Date(reservation.endDate);\r\n\r\n      const utcStart = new Date(\r\n        Date.UTC(start.getFullYear(), start.getMonth(), start.getDate())\r\n      );\r\n      const utcEnd = new Date(\r\n        Date.UTC(end.getFullYear(), end.getMonth(), end.getDate())\r\n      );\r\n\r\n      for (\r\n        let d = new Date(utcStart);\r\n        d <= utcEnd;\r\n        d.setDate(d.getDate() + 1)\r\n      ) {\r\n        excludedDates.push(new Date(d));\r\n      }\r\n    });\r\n    return excludedDates;\r\n  };\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"lake-details-container\">\r\n      {lake ? (\r\n        <>\r\n          <div className=\"lake-details-header\">\r\n            <h1>Lake: {lake.name}</h1>\r\n            <h1>Location: {lake.location}</h1>\r\n            <h1>Size: {lake.size} Ha</h1>\r\n          </div>\r\n\r\n          <div className=\"swim-list\">\r\n            {swims && swims.length > 0 ? (\r\n              swims.map((swim) => (\r\n                <div className=\"swim-item\" key={swim.id}>\r\n                  <h3>Swim {swim.swimNumber}</h3>\r\n\r\n                  <div className=\"calendar-container\">\r\n                    <DatePicker\r\n                      selected={selectedDateRanges[swim.id]?.startDate}\r\n                      onChange={(dates) =>\r\n                        handleDateRangeChange(dates, swim.id)\r\n                      }\r\n                      startDate={selectedDateRanges[swim.id]?.startDate}\r\n                      endDate={selectedDateRanges[swim.id]?.endDate}\r\n                      selectsRange\r\n                      minDate={new Date()}\r\n                      placeholderText=\"Select date range\"\r\n                      dateFormat=\"yyyy/MM/dd\"\r\n                      className=\"calendar-date\"\r\n                      excludeDates={getExcludedDates(swim.id)}\r\n                    />\r\n                  </div>\r\n\r\n                  <button\r\n                    className=\"reserve-button\"\r\n                    onClick={() => handleReservation(swim.id)}\r\n                  >\r\n                    Reserve\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>No swims available for this lake.</p>\r\n            )}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <p>Loading lake details...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default LakeDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}