{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marka\\\\OneDrive\\\\Desktop\\\\Facultate\\\\Master\\\\TIA\\\\ProiectSemestruTIA\\\\FE\\\\tiaproiect\\\\src\\\\pages\\\\LakeDetails.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\"; // Import the DatePicker component\nimport \"react-datepicker/dist/react-datepicker.css\"; // Import the DatePicker styles\nimport \"../styles/LakeDetails.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LakeDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the lake ID from the URL using `useParams`\n  const [lake, setLake] = useState(null);\n  const [swims, setSwims] = useState([]);\n  const [error, setError] = useState(null);\n  const [selectedDateRanges, setSelectedDateRanges] = useState({}); // Store selected date ranges for each swim\n\n  useEffect(() => {\n    const fetchLakeDetails = async () => {\n      try {\n        const lakeResponse = await fetch(`http://localhost:8000/api/lakes/${id}`);\n        const lakeData = await lakeResponse.json();\n        setLake(lakeData);\n        const swimsResponse = await fetch(`http://localhost:8000/api/lakes/${id}/swims`);\n        const swimsData = await swimsResponse.json();\n        setSwims(swimsData);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchLakeDetails();\n  }, [id]);\n  const handleDateRangeChange = (dates, swimId) => {\n    const [startDate, endDate] = dates;\n    setSelectedDateRanges(prevRanges => ({\n      ...prevRanges,\n      [swimId]: {\n        startDate,\n        endDate\n      }\n    }));\n  };\n  const handleReservation = swimId => {\n    const selectedRange = selectedDateRanges[swimId];\n    if (!(selectedRange !== null && selectedRange !== void 0 && selectedRange.startDate) || !(selectedRange !== null && selectedRange !== void 0 && selectedRange.endDate)) {\n      alert(\"Please select a date range for reservation.\");\n      return;\n    }\n    alert(`Reservation made for Swim ${swimId} from ${selectedRange.startDate.toLocaleDateString()} to ${selectedRange.endDate.toLocaleDateString()}`);\n    fetch(`http://localhost:8000/api/swims/${swimId}/reserve`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        startDate: selectedRange.startDate,\n        endDate: selectedRange.endDate\n      })\n    }).then(response => {\n      if (!response.ok) throw new Error(\"Failed to reserve swim\");\n      alert(\"Reservation successful!\");\n    }).catch(error => alert(error.message));\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lake-details-container\",\n    children: lake ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lake-details-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Lake: \", lake.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Location: \", lake.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Size: \", lake.size, \" Ha\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swim-list\",\n        children: swims && swims.length > 0 ? swims.map(swim => {\n          var _selectedDateRanges$s, _selectedDateRanges$s2, _selectedDateRanges$s3;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"swim-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Swim \", swim.swimNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendar-container\",\n              children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                selected: (_selectedDateRanges$s = selectedDateRanges[swim.id]) === null || _selectedDateRanges$s === void 0 ? void 0 : _selectedDateRanges$s.startDate,\n                onChange: dates => handleDateRangeChange(dates, swim.id),\n                startDate: (_selectedDateRanges$s2 = selectedDateRanges[swim.id]) === null || _selectedDateRanges$s2 === void 0 ? void 0 : _selectedDateRanges$s2.startDate,\n                endDate: (_selectedDateRanges$s3 = selectedDateRanges[swim.id]) === null || _selectedDateRanges$s3 === void 0 ? void 0 : _selectedDateRanges$s3.endDate,\n                selectsRange: true // Enables range selection\n                ,\n                minDate: new Date() // Prevent selecting past dates\n                ,\n                placeholderText: \"Select date range\",\n                dateFormat: \"yyyy/MM/dd\" // Set the format for the date\n                ,\n                className: \"calendar-date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"reserve-button\",\n              onClick: () => handleReservation(swim.id),\n              children: \"Reserve\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)]\n          }, swim.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No swims available for this lake.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading lake details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(LakeDetails, \"5IxzArWM+63d4JwB2ImTfg+bp4A=\", false, function () {\n  return [useParams];\n});\n_c = LakeDetails;\nexport default LakeDetails;\nvar _c;\n$RefreshReg$(_c, \"LakeDetails\");","map":{"version":3,"names":["React","useEffect","useState","useParams","DatePicker","jsxDEV","_jsxDEV","Fragment","_Fragment","LakeDetails","_s","id","lake","setLake","swims","setSwims","error","setError","selectedDateRanges","setSelectedDateRanges","fetchLakeDetails","lakeResponse","fetch","lakeData","json","swimsResponse","swimsData","message","handleDateRangeChange","dates","swimId","startDate","endDate","prevRanges","handleReservation","selectedRange","alert","toLocaleDateString","method","headers","body","JSON","stringify","then","response","ok","Error","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","location","size","length","map","swim","_selectedDateRanges$s","_selectedDateRanges$s2","_selectedDateRanges$s3","swimNumber","selected","onChange","selectsRange","minDate","Date","placeholderText","dateFormat","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marka/OneDrive/Desktop/Facultate/Master/TIA/ProiectSemestruTIA/FE/tiaproiect/src/pages/LakeDetails.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\"; // Import the DatePicker component\r\nimport \"react-datepicker/dist/react-datepicker.css\"; // Import the DatePicker styles\r\nimport \"../styles/LakeDetails.css\";\r\n\r\nconst LakeDetails = () => {\r\n  const { id } = useParams(); // Get the lake ID from the URL using `useParams`\r\n  const [lake, setLake] = useState(null);\r\n  const [swims, setSwims] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [selectedDateRanges, setSelectedDateRanges] = useState({}); // Store selected date ranges for each swim\r\n\r\n  useEffect(() => {\r\n    const fetchLakeDetails = async () => {\r\n      try {\r\n        const lakeResponse = await fetch(\r\n          `http://localhost:8000/api/lakes/${id}`\r\n        );\r\n        const lakeData = await lakeResponse.json();\r\n        setLake(lakeData);\r\n\r\n        const swimsResponse = await fetch(\r\n          `http://localhost:8000/api/lakes/${id}/swims`\r\n        );\r\n        const swimsData = await swimsResponse.json();\r\n        setSwims(swimsData);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    fetchLakeDetails();\r\n  }, [id]);\r\n\r\n  const handleDateRangeChange = (dates, swimId) => {\r\n    const [startDate, endDate] = dates;\r\n    setSelectedDateRanges((prevRanges) => ({\r\n      ...prevRanges,\r\n      [swimId]: { startDate, endDate },\r\n    }));\r\n  };\r\n\r\n  const handleReservation = (swimId) => {\r\n    const selectedRange = selectedDateRanges[swimId];\r\n    if (!selectedRange?.startDate || !selectedRange?.endDate) {\r\n      alert(\"Please select a date range for reservation.\");\r\n      return;\r\n    }\r\n\r\n    alert(\r\n      `Reservation made for Swim ${swimId} from ${selectedRange.startDate.toLocaleDateString()} to ${selectedRange.endDate.toLocaleDateString()}`\r\n    );\r\n\r\n    fetch(`http://localhost:8000/api/swims/${swimId}/reserve`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        startDate: selectedRange.startDate,\r\n        endDate: selectedRange.endDate,\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) throw new Error(\"Failed to reserve swim\");\r\n        alert(\"Reservation successful!\");\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"lake-details-container\">\r\n      {lake ? (\r\n        <>\r\n          <div className=\"lake-details-header\">\r\n            <h1>Lake: {lake.name}</h1>\r\n            <h1>Location: {lake.location}</h1>\r\n            <h1>Size: {lake.size} Ha</h1>\r\n          </div>\r\n\r\n          <div className=\"swim-list\">\r\n            {swims && swims.length > 0 ? (\r\n              swims.map((swim) => (\r\n                <div className=\"swim-item\" key={swim.id}>\r\n                  <h3>Swim {swim.swimNumber}</h3>\r\n\r\n                  <div className=\"calendar-container\">\r\n                    <DatePicker\r\n                      selected={selectedDateRanges[swim.id]?.startDate}\r\n                      onChange={(dates) =>\r\n                        handleDateRangeChange(dates, swim.id)\r\n                      }\r\n                      startDate={selectedDateRanges[swim.id]?.startDate}\r\n                      endDate={selectedDateRanges[swim.id]?.endDate}\r\n                      selectsRange // Enables range selection\r\n                      minDate={new Date()} // Prevent selecting past dates\r\n                      placeholderText=\"Select date range\"\r\n                      dateFormat=\"yyyy/MM/dd\" // Set the format for the date\r\n                      className=\"calendar-date\"\r\n                    />\r\n                  </div>\r\n\r\n                  <button\r\n                    className=\"reserve-button\"\r\n                    onClick={() => handleReservation(swim.id)}\r\n                  >\r\n                    Reserve\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>No swims available for this lake.</p>\r\n            )}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <p>Loading lake details...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LakeDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}